[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-demo-backend"
version = "1.0.0"
description = "RAG Demo with Vertex AI Search and Gemini - Backend API"
authors = [{name = "RAG Demo Contributors"}]
license = {text = "MIT"}
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "google-cloud-discoveryengine>=0.11.0",
    "google-cloud-documentai>=2.20.0",
    "google-cloud-aiplatform>=1.38.0",
    "vertexai>=1.38.0",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.2.1",
    "pandas>=2.1.0",
    "openpyxl>=3.1.0",
    "python-docx>=1.1.0",
    "PyPDF2>=3.0.1",
    "Pillow>=10.1.0",
    "nltk>=3.8.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.25.0",
    "ruff>=0.4.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "bandit>=1.7.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "ARG002", # unused-method-args
    "ARG003", # unused-class-method-args
    "ARG004", # unused-static-method-args
    "ARG005", # unused-lambda-args
    "PLR", # pylint refactor
    "PLW", # pylint warnings
]
ignore = [
    "E501",
    "B008",
    "W191",
    "B904",
    "UP035",
    "UP006",
    "E402",
    "PLR2004",  # Magic values in configuration/thresholds are acceptable
    "PLR0912",  # Too many branches - acceptable for complex business logic
    "PLR0913",  # Too many arguments - acceptable for comprehensive functions
    "PLR0915",  # Too many statements - acceptable for complex processors
    "PLW0603",  # Global statement - acceptable for singleton patterns
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["PLR2004", "ARG001", "ARG002"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["app"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "google", "vertexai"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "google.*",
    "vertexai.*",
    "nltk.*",
    "docx.*",
    "PyPDF2.*",
]
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
asyncio_mode = "auto"
