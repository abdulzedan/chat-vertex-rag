name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Backend linting and testing
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Ruff linter
        run: ruff check app/ --output-format=github

      - name: Run Ruff formatter
        run: ruff format app/ --check

      - name: Run Black formatter
        run: black --check app/

      - name: Run isort
        run: isort --check-only app/

      - name: Run Bandit security check
        run: bandit -r app/ -f json
        continue-on-error: true

      - name: Run MyPy type checking
        run: mypy app/
        continue-on-error: true

      - name: Run tests
        run: pytest --tb=short -v
        env:
          PYTHONPATH: ${{ github.workspace }}/backend

  # Frontend linting and testing
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint:check

      - name: Run Prettier check
        run: npm run format:check

      - name: Build project
        run: npm run build

  # Pre-commit hooks verification
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit on all files
        run: pre-commit run --all-files --show-diff-on-failure

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Dependency review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4

  # Build and test integration
  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Start backend server
        working-directory: ./backend
        run: |
          # Create minimal test environment
          echo "GCP_PROJECT_ID=test-project" > .env
          echo "GCP_LOCATION=us-central1" >> .env
          echo "GEMINI_MODEL=gemini-2.0-flash-001" >> .env
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ""

      - name: Test API health
        run: |
          curl -f http://localhost:8000/health || echo "Health check failed"
          # Add more integration tests here

  # Auto-merge dependabot PRs (optional)
  auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, pre-commit]
    if: |
      github.event_name == 'pull_request' &&
      github.actor == 'dependabot[bot]' &&
      contains(github.head_ref, 'dependabot/')

    steps:
      - name: Auto-merge Dependabot PRs
        uses: ahmadnassri/action-dependabot-auto-merge@v2
        with:
          target: minor
          github-token: ${{ secrets.GITHUB_TOKEN }}
